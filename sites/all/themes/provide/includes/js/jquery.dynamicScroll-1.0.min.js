//var constants = {container:'', btnLeft:'', btnRight:'', itemClass:'', interval:bool, intervalSpeed:#, slideNumber:#, numberShown:#, speed:#};
//var scroll = new dScroll(constants);
//Notes: speed works as a "duration". The smaller the number, the faster it will animate
function dScroll(constants) {
				var obj, img;
				this.container = jQuery(constants.container);
				this.containerId = constants.container;
				this.frame = this.container.parent();
				// hide frame to reduce content bouncing
				//this.frame.css({'position':'relative', 'opacity':0});
				this.itemClass = constants.itemClass;
				this.slideItems = jQuery(constants.container + ' ' + constants.itemClass);
				this.btnLeft = (constants.btnLeft == '' || constants.btnLeft == undefined) ? false : jQuery(constants.btnLeft);
				this.btnRight = (constants.btnRight == '' || constants.btnRight == undefined) ? false : jQuery(constants.btnRight);
				this.slideNumber = (constants.slideNumber == undefined) ? this.slideNumber = 1 : this.slideNumber = constants.slideNumber;
				this.currSlide = this.slideNumber;
				this.currSpeed = (this.currSlide == 1) ? 1 : this.currSlide/2;
				this.dir = 'right';
				this.numberShown = (constants.numberShown == undefined) ? this.numberShown = this.slideNumber : this.numberShown = constants.numberShown;
				this.speed = (constants.speed == undefined) ? this.speed = 300 : this.speed = constants.speed;
				this.interval = (constants.interval == undefined) ? false : constants.interval;
				this.intervalSpeed = (constants.intervalSpeed == undefined) ? 5000 : constants.intervalSpeed * 10;
				if(this.slideItems.length%this.numberShown != 0) this.addNodes(this.slideNumber - this.slideItems.length%this.numberShown);
				if(this.slideItems.find('img').length) {
								obj = this;
								img = this.slideItems.find('img')[0];
								if(img.complete || img.readyState === 4) {
												obj.initScroll();
								} else {
												jQuery(img).load(function(){
																obj.initScroll();
												});
								}
								// IE fix
								img.src = this.slideItems.find('img')[0].src;
				} else {
								this.initScroll();
				}
}
// initialize scroller
dScroll.prototype.initScroll = function() {
				this.itemWidth = this.slideItems.width();
				this.itemHeight = this.slideItems.height();
				this.totalItemHeight = this.slideItems.outerHeight(true);
				this.totalItemWidth = this.slideItems.outerWidth(true);
				this.totalWidth = this.totalItemWidth * this.slideItems.length;
				this.totalSlide = this.slideNumber * this.totalItemWidth;
				this.container.left = 0;
				this.animate = false;
				this.disabled = false;
				this.createScroll();
}
// add nodes to slideItems when not enough elements for pages
dScroll.prototype.addNodes = function(number) {
				var tempNode;
				for(i=0; i<number; i++) {
								tempNode = this.slideItems[this.slideItems.length-1].cloneNode(false);
								this.container.append(tempNode);
				}
				this.slideItems = jQuery(this.containerId + ' ' + this.itemClass);
}
// Set start position and adjust css for container and frame
dScroll.prototype.createScroll =  function() {
				var frameWidth = this.totalItemWidth * this.numberShown - parseInt(jQuery(this.slideItems[0]).css('margin-right'));
				this.container.css({'width': this.totalWidth + 'px',
								'height': this.totalItemHeight + 'px',
								'position': 'absolute',
								'left': this.container.left + 'px'});
				this.frame.css({'width': frameWidth + 'px',
								'height': this.totalItemHeight + 'px',
								'position':'relative',
								'overflow': 'hidden'});
				this.slideItems.css({'width': this.itemWidth + 'px',
								'height': this.itemHeight + 'px',
								'float': 'left'});
				this.addBtnEvent();	// add arrow events
				if(this.interval && !this.disabled) this.createInterval(); // create slide interval
}
// add click event
dScroll.prototype.addBtnEvent = function() {
				var obj = this;
				var temp;
				if(this.slideItems.length <= this.numberShown) {
								this.disabled = true;
								if(this.btnLeft) this.btnLeft.addClass('disabled-btn');
								if(this.btnRight) this.btnRight.addClass('disabled-btn');
				} else {
								if(this.btnLeft) {
												this.btnLeft.click(function() {
																if(!obj.animate && !obj.disabled) {
																				if(obj.scrollInterval) clearInterval(obj.scrollInterval);
																				obj.animate = true;
																				obj.dir = 'left';
																				obj.shiftElementsLeft(obj.slideNumber);
																				obj.slideLeft();
																}
																return false;
												});
								}
								if(this.btnRight) {
												this.btnRight.click(function() {
																if(!obj.animate && !obj.disabled) {
																				if(obj.scrollInterval) clearInterval(obj.scrollInterval);
																				obj.animate = true;
																				obj.dir = 'right';
																				obj.slideRight();
																}
																return false;
												});
								}
				}
				// reveal frame
				//this.frame.animate({
				//				opacity: 1
				//}, 1500);
}
// Create interval
dScroll.prototype.createInterval =  function() {
				var obj = this;
				this.scrollInterval = setInterval(function() {
								obj.animate = true;
								obj.slideRight();
				}, this.intervalSpeed);
}
// moves the elements on the page in preparation for the slide
dScroll.prototype.shiftElementsLeft = function(shiftNumber) {
				this.container.left = this.container.left - shiftNumber * this.totalItemWidth;
				this.container.css('left', this.container.left + 'px');
				for(i=shiftNumber; i>0; i--) {
								jQuery(this.slideItems[this.slideItems.length - 1]).insertBefore(this.slideItems[0]);
								this.slideItems = jQuery(this.containerId + ' ' + this.itemClass);
				}
}
dScroll.prototype.shiftElementsRight = function(shiftNumber) {
				this.container.left = this.container.left + shiftNumber * this.totalItemWidth;
				this.container.css('left', this.container.left + 'px');
				for(i=shiftNumber; i>0; i--) {
								jQuery(this.slideItems[0]).insertAfter(this.slideItems[this.slideItems.length - 1]);
								this.slideItems = jQuery(this.containerId + ' ' + this.itemClass);
				}
}
// slide elements left
dScroll.prototype.slideLeft = function() {
				var obj = this;
				this.container.left = this.container.left + this.totalSlide;
				this.container.animate({
								left: this.container.left
				}, (this.totalItemWidth * this.currSpeed)/this.speed * 500, function() { obj.animate = false;});
}
// slide elements right
dScroll.prototype.slideRight = function() {
				var obj = this;
				this.container.left = this.container.left - this.totalSlide;
				this.container.animate({
								left: this.container.left
				}, (this.totalItemWidth * this.currSpeed)/this.speed * 500, function() {obj.shiftElementsRight(obj.currSlide); obj.animate = false;});
}
// reset slide number
dScroll.prototype.resetSlide = function() {
				var obj = this;
				if(obj.scrollInterval) clearInterval(obj.scrollInterval);
				this.totalSlide = this.slideNumber * this.totalItemWidth;
				this.currSlide = this.slideNumber;
				this.currSpeed = (this.currSlide == 1) ? 1 : this.currSlide/2;
}
